---
import LayoutPrincipal from "../../layouts/LayoutPrincipal.astro";
import Card from "../../Components/Card.astro";
import Layoutcontenido from "../../layouts/Layoutcontenido.astro";
import BotonPrincipal from "../../Components/BotonPrincipal.astro";
import Loader from "../../Components/Loader.astro"

const { idarea, idtiposdearea } = Astro.params;

async function fetchItems(idArea, idTiposDeArea) {
  console.log('Fetching items with idArea:', idArea, 'and idTiposDeArea:', idTiposDeArea);
  
  try {
    const response = await fetch(`http://localhost:4000/api/items/${idArea}/${idtiposdearea}`);
    if (!response.ok) {
      throw new Error(`Error fetching items: ${response.statusText}`);
    }
    return response.json();
  } catch (error) {
    console.error('Error fetching items:', error);
    return [];
  }
}

const items = idarea && idtiposdearea ? await fetchItems(idarea, idtiposdearea) : [];

export async function getStaticPaths() {
  try {
    const response = await fetch('http://localhost:4000/api/areas');
    if (!response.ok) {
      throw new Error('Error fetching areas: ' + response.statusText);
    }
    const areas = await response.json();

    const paths = await Promise.all(
      areas.map(async area => {
        const tiposDeAreaResponse = await fetch(`http://localhost:4000/api/tipos-de-area/${area.idarea}`);
        if (!tiposDeAreaResponse.ok) {
          throw new Error('Error fetching tipos de área: ' + tiposDeAreaResponse.statusText);
        }
        const tiposDeArea = await tiposDeAreaResponse.json();

        return tiposDeArea.map(tipoDeArea => ({
          params: { idarea: area.idarea.toString(), idtiposdearea: tipoDeArea.idtiposdearea.toString() },
          path: `/${area.idarea}-${tipoDeArea.idtiposdearea}` // Update the path format to match the link format
        }));
      })
    );

    return paths.flat(); // Return the flattened array of objects
  } catch (error) {
    console.error('Error generating paths:', error);
    return [];
  }
}
---
<LayoutPrincipal title="">
  <Layoutcontenido title="">
    <div class="p-8">
      <h1 class="text-3xl font-bold font-josefin-slab">Items de Áreas</h1>
      <p class="text-lg font-josefin-slab">Por favor seleccione el ítem en el cual se centrará su proyecto</p>
    </div>

    <div class="flex justify-center">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {items.length > 0 ? (
          items.map(item => (
            <div :key={item.iditemsarea}>
              <a href="/VistaObjetivos">
              <Card Text={item.items} />
            </a>
            </div>
          ))
        ) : (
          <p class="text-lg font-josefin-slab">No se encontraron ítems.</p>
        )}
      </div>
    </div>

    <div class="flex flex-col items-center sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-4 md:p-8">
      <a href={`/Services/${idarea}`} class="flex flex-col items-center sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-4 md:pr-8">
        <BotonPrincipal Text="Volver" />
      </a>
    </div>
  </Layoutcontenido>
</LayoutPrincipal>