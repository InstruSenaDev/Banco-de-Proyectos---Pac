---
import LayoutPrincipal from "../../layouts/LayoutPrincipal.astro";
import Card from "../../Components/Card.astro";
import Layoutcontenido from "../../layouts/Layoutcontenido.astro";
import BotonPrincipal from "../../Components/BotonPrincipal.astro";
import Loader from "../../Components/Loader.astro"

const { idarea, idtiposdearea } = Astro.params;

async function fetchItems(idArea, idTiposDeArea) {
  console.log('Fetching items with idArea:', idArea, 'and idTiposDeArea:', idTiposDeArea);
  
  try {
    const response = await fetch(`http://localhost:4000/api/items/${idArea}/${idTiposDeArea}`);
    if (!response.ok) {
      throw new Error(`Error fetching items: ${response.statusText}`);
    }
    return response.json();
  } catch (error) {
    console.error('Error fetching items:', error);
    return [];
  }
}

const items = idarea && idtiposdearea ? await fetchItems(idarea, idtiposdearea) : [];

// Obtener todas las rutas posibles
export async function getStaticPaths() {
  try {
    const response = await fetch('http://localhost:4000/api/areas');
    if (!response.ok) {
      throw new Error('Error fetching areas: ' + response.statusText);
    }
    const areas = await response.json();

    const paths = await Promise.all(
      areas.map(async (area) => {
        const tiposDeAreaResponse = await fetch(`http://localhost:4000/api/tipos-de-area/${area.idarea}`);
        if (!tiposDeAreaResponse.ok) {
          throw new Error('Error fetching tipos de área: ' + tiposDeAreaResponse.statusText);
        }
        const tiposDeArea = await tiposDeAreaResponse.json();

        return tiposDeArea.map((tipoDeArea) => ({
          params: { idarea: area.idarea.toString(), idtiposdearea: tipoDeArea.idtiposdearea.toString() },
          path: `/Services/${area.idarea}-${tipoDeArea.idtiposdearea}` // Ajusta el formato de la ruta
        }));
      })
    );

    return paths.flat(); // Devuelve el array aplanado de objetos
  } catch (error) {
    console.error('Error generating paths:', error);
    return [];
  }
}
---

<LayoutPrincipal title="">
  <Layoutcontenido title="">
    <div class="p-8">
      <h1 class="text-3xl font-bold font-josefin-slab">Items de Áreas</h1>
      <p class="text-lg font-josefin-slab">Por favor seleccione el ítem en el cual se centrará su proyecto</p>
    </div>

    <div class="flex justify-center">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {items.length > 0 ? (
          items.map(item => (
            <div :key={item.iditemsarea} class="card-container" data-item-id={item.iditemsarea}>
              <a href="#" class="card-link">
                <Card Text={item.items} />
              </a>
            </div>
          ))
        ) : (
          <p class="text-lg font-josefin-slab">No se encontraron ítems.</p>
        )}
      </div>
    </div>

    <div class="flex flex-col items-center sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-4 md:p-8">
      <a href={`/Services/${idarea}`} class="flex flex-col items-center sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-4 md:pr-8">
        <BotonPrincipal Text="Volver" />
      </a>
    </div>
  </Layoutcontenido>
</LayoutPrincipal>

<script type="text/javascript">
  document.addEventListener('DOMContentLoaded', function() {
    // Obtener el ID del área desde el atributo data-* del HTML
    const idarea = document.querySelector('body').dataset.idarea;
    console.log('ID del área:', idarea); // Verifica que este valor no sea undefined o null
    
    // Obtener el ID del proyecto desde la URL
    const projectId = new URLSearchParams(window.location.search).get('projectId');
    console.log('ID del proyecto:', projectId); // Verifica que este valor sea correcto

    document.querySelectorAll('.card-link').forEach(link => {
      link.addEventListener('click', async function(e) {
        e.preventDefault(); // Previene el comportamiento predeterminado del enlace

        // Obtener el ID del ítem desde el contenedor más cercano
        const itemId = this.closest('.card-container').dataset.itemId;
        console.log('ID del ítem:', itemId); // Verifica que este valor sea correcto

        // Verifica si el ID del ítem y el ID del proyecto están presentes
        if (itemId && projectId) {
          try {
            console.log('Enviando solicitud para actualizar el ítem...');
            const response = await fetch('http://localhost:4000/api/update-proyecto-item', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ projectId, itemId }),
            });

            if (!response.ok) {
              throw new Error('Error updating proyecto: ' + response.statusText);
            }

            const result = await response.json();
            console.log('Ítem actualizado correctamente:', result);

            // Redirige a la vista deseada después de actualizar
            if (idarea) {
              console.log('Redirigiendo a /Vista_Objetivos/' + idarea); // Verifica la URL de redirección
              window.location.href = `/Vista_Objetivos/${idarea}`;
            } else {
              console.error('ID del área no disponible para redirección.');
            }
          } catch (error) {
            console.error('Error al actualizar el ítem:', error);
          }
        } else {
          console.error('Faltan ID del ítem o del proyecto.', { itemId, projectId });
        }
      });
    });
  });
</script>