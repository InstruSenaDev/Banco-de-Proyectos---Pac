---
import LayoutPrincipal from "../../layouts/LayoutPrincipal.astro";
import BarraPreguntas from "../../Components/BarraPreguntas.astro";
import Grid from "../../Components/Grid.astro";
import BotonPrincipal from "../../Components/BotonPrincipal.astro";
import BotonSegundo from "../../Components/BotonSegundo.astro";


interface PathParams {
  idarea: string;
  idtiposdearea: string;
}

export async function getStaticPaths(): Promise<{ params: PathParams }[]> {
  try {
    const areasResponse = await fetch('http://localhost:4000/api/areas');
    const areas = await areasResponse.json();

    const paths = await Promise.all(
      areas.map(async (area) => {
        const tiposDeAreaResponse = await fetch(`http://localhost:4000/api/tipos-de-area/${area.idarea}`);
        const tiposDeArea = await tiposDeAreaResponse.json();

        return tiposDeArea.map((tipoDeArea) => ({
          params: { idarea: area.idarea.toString(), idtiposdearea: tipoDeArea.idtiposdearea.toString() },
        }));
      })
    );

    return paths.flat();
  } catch (error) {
    console.error('Error generating paths:', error);
    return [];
  }
}

async function fetchObjetivos(idArea: string) {
  try {
    const response = await fetch(`http://localhost:4000/api/objetivos/${idArea}`);
    if (!response.ok) {
      throw new Error(`Error fetching objetivos: ${response.statusText}`);
    }
    return response.json();
  } catch (error) {
    console.error('Error fetching objetivos:', error);
    return [];
  }
}

const { idarea, idtiposdearea } = Astro.params;
const objetivos = idarea ? await fetchObjetivos(idarea) : [];

const groupedObjetivos = objetivos.reduce((acc, objetivo) => {
  if (!acc[objetivo.categoria]) {
    acc[objetivo.categoria] = [];
  }
  acc[objetivo.categoria].push(objetivo);
  return acc;
}, {} as Record<string, { idobjetivos: number; descripcion: string; categoria: string }[]>);

---

<LayoutPrincipal title="">
  <div class="flex justify-center min-h-screen">
    <div class="p-10 w-full max-w-7xl my-10">
      <div class="flex flex-col">
        <div class="text-left mb-4">
          <h1 class="font-josefin-slab text-2xl text-black">Por favor marque “SI” o “NO” en cada pregunta</h1>
        </div>

        <form id="respuestasForm" action="http://localhost:4000/api/guardarRespuestasObjetivos" method="POST">
          <!-- Campo oculto para idproyecto -->
          <input type="hidden" name="idproyecto" id="idproyecto" />

          <!-- Títulos de la tabla -->
          <div class="grid grid-cols-12 bg-[#A3E784] font-bold py-4 rounded-t-lg border-b">
            <div class="col-span-12 md:col-span-2 text-center md:text-left px-6">OBJETIVOS</div>
          </div>

          <div class="grid grid-cols-12 bg-green-50 font-semibold py-4 rounded-t-lg border-b">
            <div class="col-span-12 md:col-span-10 text-center md:text-left pl-4">Tipos de objetivos</div>
            <div class="hidden md:block col-span-1 text-center">Sí</div>
            <div class="hidden md:block col-span-1 text-center">No</div>
          </div>

          <!-- Iteración sobre las categorías y preguntas -->
          {Object.keys(groupedObjetivos).map((categoriaNombre) => (
            <div :key={categoriaNombre}>
              <div class="grid-cols-12 bg-green-50 md:col-span-10 pl-4 col-span-12 flex py-2">
                {categoriaNombre}
              </div>

              {groupedObjetivos[categoriaNombre].map((objetivo, index) => (
                <Grid 
                  :key={objetivo.idobjetivos}
                  Text1={`${index + 1}. ${objetivo.descripcion}`}
                  id1={`radioButton-grid${objetivo.idobjetivos}-si`}
                  id2={`radioButton-grid${objetivo.idobjetivos}-no`}
                  name={`pregunta${objetivo.idobjetivos}`}
                />
              ))}
            </div>
          ))}

          <!-- Botones de navegación -->
          <div class="flex flex-col items-center sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-4">
            <a href={`/Services/${idarea}-${idtiposdearea}?projectId=${Astro.url.searchParams.get('projectId')}`}>
              <BotonPrincipal Text="Volver" />
            </a>
            <button type="submit" class="flex flex-col items-center sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-4">
              <BotonSegundo Text="Siguiente" />
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</LayoutPrincipal>

<script type="text/javascript">
  document.addEventListener('DOMContentLoaded', function() {
    const urlParams = new URLSearchParams(window.location.search);
    const projectId = urlParams.get('projectId');

    if (projectId) {
      document.getElementById('idproyecto').value = projectId;
    } else {
      console.error('Falta el ID del proyecto en la URL.');
    }
  });
</script>