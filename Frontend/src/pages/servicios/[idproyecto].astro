---
import Layoutprincipal from "../../layouts/Layoutprincipal.astro";
import Grid from "../../Components/Grid.astro";
import BotonPrincipal from "../../Components/BotonPrincipal.astro";
import BotonSegundo from "../../Components/BotonSegundo.astro";
import { Evaluar } from "../../Components/Evaluar";

interface PathParams {
  idproyecto: string;
}

export const prerender = true;
const { idproyecto } = Astro.params as PathParams;

let respuestas: Array<{ idrespuestaobjetivos: string; descripcion: string; id1: string; id2: string; nombre: string; categoria: string }> = [];

const fetchRespuestas = async () => {
  try {
    const response = await fetch(`http://localhost:4000/api/respuestas/${idproyecto}`);
    if (response.ok) {
      respuestas = await response.json();
    } else {
      console.error('Error al obtener las respuestas:', response.statusText);
    }
  } catch (error) {
    console.error('Error de red al obtener las respuestas:', error);
  }
};

await fetchRespuestas();

export async function getStaticPaths() {
  try {
    const response = await fetch('http://localhost:4000/api/proyectos');
    if (response.ok) {
      const proyectos = await response.json();
      const paths = proyectos.map((proyecto) => ({
        params: { idproyecto: proyecto.idproyecto.toString() },
      }));

      return {
        paths,
        fallback: false,
      };
    } else {
      console.error('Error al obtener los proyectos para paths:', response.statusText);
      return [];
    }
  } catch (error) {
    console.error('Error de red al obtener proyectos para paths:', error);
    return [];
  }
}
---

<Layoutprincipal title="Calificar">
  <div class="flex justify-center min-h-screen">
    <div class="p-10 w-full max-w-7xl my-10">
      <div class="flex flex-col">
        <div class="text-left mb-4">
          <h1 class="font-josefin-slab text-2xl text-black">Calificación</h1>
        </div>

        <!-- Mostrar las respuestas -->
        <div class="grid grid-cols-12 bg-[#A3E784] font-bold py-4 rounded-t-lg border-b">
          <div class="col-span-12 md:col-span-9 text-center md:text-left pl-4">Respuestas</div>
          <div class="hidden md:flex md:col-span-3 justify-between">
            <div class="col-span-1 text-center">Sí</div>
            <div class="col-span-1 text-center">No</div>
            <div class="col-span-1 text-center">Calificar</div>
          </div>
        </div>

        {respuestas.length > 0 ? (
          respuestas.map((respuesta) => (
            <div :key={respuesta.idrespuestaobjetivos} class="grid grid-cols-12 bg-green-50 py-2">
              <Grid 
                Text1={respuesta.descripcion} 
                id1={respuesta.id1} 
                id2={respuesta.id2} 
                name={respuesta.nombre} 
                categoria={respuesta.categoria} 
              />
              <Evaluar client:visible/>
            </div>
          ))
        ) : (
          <p>No hay respuestas disponibles.</p>
        )}

        <div class="flex flex-col items-center sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-4">
          <a href={`/respuestas/${idproyecto}`}>
            <BotonPrincipal Text="Volver" />
          </a>
          <a href="/VistaAlcance" class="flex flex-col items-center sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-4">
            <BotonSegundo Text="Siguiente" />
          </a>
        </div>
      </div>
    </div>
  </div>
</Layoutprincipal>